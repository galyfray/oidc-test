[tool.poetry]
name = "name"
version = "0.1.0"
description = ""
authors = ["John Smith <john@example.com>"]
readme = "README.md"
packages = [{ include = "src" }]

[tool.poe.tasks]
_pylint.cmd = "pylint ${files}"
_pylint.args = [{ name = "files", default = "src", positional = true, multiple = true }]

_mypy.cmd = "mypy ${files}"
_mypy.args = [{ name = "files", default = "src", positional = true, multiple = true }]

_bandit.cmd = "bandit -c pyproject.toml -r ${files}"
_bandit.args = [{ name = "files", default = "src", positional = true, multiple = true }]

_pydoc.cmd = "pydocstyle ${files}"
_pydoc.args = [{ name = "files", default = "src", positional = true, multiple = true }]

lint.sequence = [
    { ref = "_mypy ${files}" },
    { ref = "_pylint ${files}" },
    { ref = "_bandit ${files}" },
    { ref = "_pydoc ${files}" }
]
lint.args = [{ name = "files", positional = true, multiple = true }]
lint.ignore_fail = "return_zero"

test = "pytest test/  --cache-clear"

coverage = [
    {cmd ="pytest --cov=src --cache-clear --cov-report term-missing --benchmark-disable test/"}
]

[tool.poetry.dependencies]
python = "^3.10"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pre-commit = "^2.20.0"
mypy = "^0.991"
poethepoet = "^0.17.1"
pylint = "^2.15.10"
bandit = { extras = ["toml"], version = "^1.7.4" }
pytest = "^7.2.0"
pytest-benchmark = "^4.0.0"
pytest-cov = "^4.0.0"
pydocstyle = {extras = ["toml"], version = "^6.2.3"}
sphinx = "^6.1.3"
sphinx-rtd-theme = "^1.2.0rc2"

[tool.pydocstyle]
convention = "numpy"


[tool.autopep8]
max_line_length = 120
ignore = "W6"
in-place = true
recursive = true
select = ["E2", "E10", "E11", "E122", "E124", "E125", "E127", "E129", "E133", "E3", "E4", "E5", "E7", "W2", "W3"]

[tool.mypy]
python_version = "3.10"
disallow_any_unimported = true
disallow_any_expr = true
disallow_any_explicit = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
local_partial_types = true
no_implicit_reexport = true
strict_equality = true
show_column_numbers = true
strict_concatenate = true

[tool.bandit]
tests = ["B402", "B401", "B310", "B403", "B404", "B302", "B321", "B301", "B312", "B303", "B306", "B304", "B305", "B308", "B307", "B313", "B320", "B405", "B409", "B408", "B407", "B406", "B410", "B411", "B101", "B102", "B201", "B104", "B107", "B106", "B105", "B608", "B108", "B701", "B609", "B601", "B501", "B103", "B507", "B502", "B504", "B605", "B606", "B607", "B602", "B603", "B112", "B110", "B702", "B505", "B506", "B323", "B610", "B703", "B611", "B412", "B413"]
exclude_dirs = ["./test/*"]

[tool.pylint.main]
exit-zero = true
jobs = 0
recursive = true
suggestion-mode = true
# ignore-paths =

[tool.pylint.basic]
class-attribute-naming-style = "snake_case"

[tool.pylint.classes]
defining-attr-methods = ["__init__", "__new__", "__post_init__"]

[tool.pylint.imports]
# Deprecated modules which should not be used, separated by a comma.
# deprecated-modules =

# Force import order to recognize a module as part of the standard compatibility
# libraries.
# known-standard-library =

[tool.pylint.logging]
logging-format-style = "new"

disable = [
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
    "design",
    "line-too-long",
    "too-many-lines",
    "too-many-nested-blocks",
    "typecheck",
    "import-error",
    "trailing-whitespace"
]

[tool.pylint.method_args]
# List of qualified names (i.e., library.method) which require a timeout
# parameter e.g. 'requests.api.get,requests.api.post'
timeout-methods = ["requests.api.delete", "requests.api.get", "requests.api.head", "requests.api.options", "requests.api.patch", "requests.api.post", "requests.api.put", "requests.api.request"]

[tool.pylint.reports]
reports = false # TODO find a clean way to parametrise this.

[tool.pylint.spelling]
max-spelling-suggestions = 60

# List of comma separated words that should not be checked.
# spelling-ignore-words =

[tool.pylint.string]
check-quote-consistency = true
check-str-concat-over-line-jumps = true

[tool.pylint.variables]
init-import = true
